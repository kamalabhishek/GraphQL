[{"/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/index.tsx":"1","/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/reportWebVitals.ts":"2","/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/App.tsx":"3","/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/Pages/Tweets.tsx":"4","/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/Pages/Create.tsx":"5","/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/Hooks/useGetAllTweets.tsx":"6","/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/index.tsx":"7","/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/reportWebVitals.ts":"8","/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/App.tsx":"9","/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/Pages/Tweets.tsx":"10","/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/Pages/Create.tsx":"11","/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/Hooks/useGetAllTweets.tsx":"12"},{"size":581,"mtime":1657764454762,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1657510907650,"results":"15","hashOfConfig":"14"},{"size":193,"mtime":1657510907650,"results":"16","hashOfConfig":"14"},{"size":4427,"mtime":1657764389870,"results":"17","hashOfConfig":"14"},{"size":998,"mtime":1657510907650,"results":"18","hashOfConfig":"14"},{"size":522,"mtime":1657510907650,"results":"19","hashOfConfig":"14"},{"size":581,"mtime":1657764454762,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1657510907650,"results":"22","hashOfConfig":"21"},{"size":193,"mtime":1657510907650,"results":"23","hashOfConfig":"21"},{"size":4427,"mtime":1657764389870,"results":"24","hashOfConfig":"21"},{"size":998,"mtime":1657510907650,"results":"25","hashOfConfig":"21"},{"size":522,"mtime":1657510907650,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ihamwj",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y1zaby",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/index.tsx",[],[],"/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/reportWebVitals.ts",[],[],"/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/App.tsx",[],[],"/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/Pages/Tweets.tsx",["65","66","67","68","69","70","71","72","73","74","75"],[],"/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/Pages/Create.tsx",["76","77","78","79"],[],"import {  gql, useMutation } from \"@apollo/client\";\nimport { InputBase } from \"@mui/material\";\nimport { ReactNode, useState } from \"react\";\n\nconst CREATE_TWEET = gql`\nmutation CreateMutation($body: String!){\n  createTweet(body: $body) {\n    id\n    body\n    date\n  }\n}\n`;\n\nfunction Create() {\n\n    const [body, setBody] = useState<String>();\n\n    const [createT, {data, loading, error}] = useMutation(CREATE_TWEET,{variables:{\n        body\n    }})\n    \n    return (\n      <InputBase\n          placeholder={\"Tweet to @twitterapi\"}\n          onKeyDown={(e) => {\n            if(e.key === \"Enter\")\n            {\n              console.log(body);\n              createT();\n              window.location.reload();\n            }\n          }}\n          onChange={ (e) => { setBody(e.target.value) } }\n          style={{\n            border: \"1px solid grey\",\n            backgroundColor: \"white\",\n            width: \"99%\",\n            margin: \"5px 5px\",\n          }}\n        />\n    );\n}\n\nexport default Create;","/home/kamalabhishek.gunna/Desktop/desktp/imp/gQ/Graphql-assignments/twitter-react-assignment/src/Hooks/useGetAllTweets.tsx",[],[],"/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/index.tsx",[],[],"/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/reportWebVitals.ts",[],[],"/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/App.tsx",[],[],"/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/Pages/Tweets.tsx",["80","81","82","83","84","85","86","87","88","89","90"],[],"import React, { ReactNode, useState } from \"react\";\nimport useGetAllTweets from \"../Hooks/useGetAllTweets\";\nimport logo from \"../images/tlogo.jpeg\";\nimport verify from \"../images/verify.png\";\nimport green from \"../images/greenDot.png\";\nimport gray from \"../images/grayDot.png\";\nimport sum from \"../images/sum.png\";\nimport Twitl from \"../images/twitl.png\";\nimport \"./Tweets.css\";\nimport { Button, InputBase, Link } from \"@mui/material\";\n\nimport { gql, useMutation } from \"@apollo/client\";\nimport Create from \"./Create\";\n\nconst READ_TWEET = gql`\n  mutation MarkTweetRead($markTweetReadId: ID!) {\n    markTweetRead(id: $markTweetReadId)\n  }\n`;\n\nfunction Tweets() {\n  const { error, loading, data } = useGetAllTweets();\n\n  const [idVal, setIdVal] = useState<string>();\n  const [readOrNot, { data: data1, loading: loading1, error: error1 }] =\n    useMutation(READ_TWEET, {\n      variables: {\n        markTweetReadId: idVal,\n      },\n    });\n\n  if (loading) return <h1>Loading...</h1>;\n\n  if (error) return <h1>Something Went Wrong...</h1>;\n\n  const formatDate = (dateString: string) => {\n    const options: Intl.DateTimeFormatOptions = {\n      month: \"short\",\n      day: \"numeric\",\n    };\n    return new Date(dateString).toLocaleDateString([], options);\n  };\n\n  return (\n    <div>\n      <div className=\"Tweetcontain\">\n        <h1>Tweets</h1>\n        <Button\n          style={{\n            textTransform: \"none\",\n            color: \"black\",\n            backgroundColor: \"lightgrey\",\n            marginRight: \"30px\",\n            height: \"30px\",\n            marginTop: \"20px\",\n          }}\n          startIcon={\n            <img\n              src={Twitl}\n              alt=\"verify image\"\n              height={\"20px\"}\n              width={\"20px\"}\n            />\n          }\n        >\n          Follow @twitterapi\n        </Button>\n      </div>\n      {data.tweets.map(\n        (\n          tweet: {\n            body: ReactNode;\n            date: string;\n            id: string;\n            read: boolean;\n            userTweet: {\n              username: string;\n              name: string;\n            };\n            statTweet: {\n              views: string | number;\n            };\n          },\n          key: any\n        ) => (\n          <div className=\"contain\" key={key}>\n            <img\n              src={logo}\n              alt=\"twitter image\"\n              height={\"80px\"}\n              width={\"80px\"}\n            />\n            <div style={{ width:\"100%\"}}>\n              <div\n                className={\"topcontain\"}\n                onClick={async () => {\n                  await setIdVal(tweet.id);\n                  await readOrNot();\n                  window.location.reload();\n                }}\n              >\n                <div className=\"topcontainleft\">\n                  {tweet.userTweet.username}{\" \"}\n                  <img\n                    src={verify}\n                    alt=\"verify image\"\n                    height={\"20px\"}\n                    width={\"20px\"}\n                  />{\" \"}\n                  @{tweet.userTweet.name}\n                  {tweet.read ? (\n                    <img\n                      src={green}\n                      alt=\"verify image\"\n                      height={\"10px\"}\n                      width={\"10px\"}\n                    />\n                  ) : (\n                    <img\n                      src={gray}\n                      alt=\"verify image\"\n                      height={\"10px\"}\n                      width={\"10px\"}\n                    />\n                  )}\n                </div>\n                <div className=\"topcontainright\">{formatDate(tweet.date)}</div>\n              </div>\n              <div className=\"bodycontain\">\n                {tweet.body}\n                <div>\n                  <Button\n                    style={{ textTransform: \"none\", color: \"grey\" }}\n                    startIcon={\n                      <img\n                        src={sum}\n                        alt=\"verify image\"\n                        height={\"20px\"}\n                        width={\"20px\"}\n                      />\n                    }\n                  >\n                    Show Summary\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )\n      )}\n      <div style={{ width: \"82%\", backgroundColor: \"lightgray\" }}>\n        <Create></Create>\n      </div>\n    </div>\n  );\n}\n\nexport default Tweets;","/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/Pages/Create.tsx",["91","92","93","94"],[],"/home/kamalabhishek.gunna/Documents/graphQL/Twitter-React-Assignment/src/Hooks/useGetAllTweets.tsx",[],[],{"ruleId":"95","severity":1,"message":"96","line":10,"column":18,"nodeType":"97","messageId":"98","endLine":10,"endColumn":27},{"ruleId":"95","severity":1,"message":"99","line":10,"column":29,"nodeType":"97","messageId":"98","endLine":10,"endColumn":33},{"ruleId":"95","severity":1,"message":"100","line":25,"column":29,"nodeType":"97","messageId":"98","endLine":25,"endColumn":34},{"ruleId":"95","severity":1,"message":"101","line":25,"column":45,"nodeType":"97","messageId":"98","endLine":25,"endColumn":53},{"ruleId":"95","severity":1,"message":"102","line":25,"column":62,"nodeType":"97","messageId":"98","endLine":25,"endColumn":68},{"ruleId":"103","severity":1,"message":"104","line":58,"column":13,"nodeType":"105","endLine":63,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":87,"column":13,"nodeType":"105","endLine":92,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":104,"column":19,"nodeType":"105","endLine":109,"endColumn":21},{"ruleId":"103","severity":1,"message":"104","line":112,"column":21,"nodeType":"105","endLine":117,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":119,"column":21,"nodeType":"105","endLine":124,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":135,"column":23,"nodeType":"105","endLine":140,"endColumn":25},{"ruleId":"95","severity":1,"message":"106","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":19},{"ruleId":"95","severity":1,"message":"107","line":19,"column":22,"nodeType":"97","messageId":"98","endLine":19,"endColumn":26},{"ruleId":"95","severity":1,"message":"108","line":19,"column":28,"nodeType":"97","messageId":"98","endLine":19,"endColumn":35},{"ruleId":"95","severity":1,"message":"109","line":19,"column":37,"nodeType":"97","messageId":"98","endLine":19,"endColumn":42},{"ruleId":"95","severity":1,"message":"96","line":10,"column":18,"nodeType":"97","messageId":"98","endLine":10,"endColumn":27},{"ruleId":"95","severity":1,"message":"99","line":10,"column":29,"nodeType":"97","messageId":"98","endLine":10,"endColumn":33},{"ruleId":"95","severity":1,"message":"100","line":25,"column":29,"nodeType":"97","messageId":"98","endLine":25,"endColumn":34},{"ruleId":"95","severity":1,"message":"101","line":25,"column":45,"nodeType":"97","messageId":"98","endLine":25,"endColumn":53},{"ruleId":"95","severity":1,"message":"102","line":25,"column":62,"nodeType":"97","messageId":"98","endLine":25,"endColumn":68},{"ruleId":"103","severity":1,"message":"104","line":58,"column":13,"nodeType":"105","endLine":63,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":87,"column":13,"nodeType":"105","endLine":92,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":104,"column":19,"nodeType":"105","endLine":109,"endColumn":21},{"ruleId":"103","severity":1,"message":"104","line":112,"column":21,"nodeType":"105","endLine":117,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":119,"column":21,"nodeType":"105","endLine":124,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":135,"column":23,"nodeType":"105","endLine":140,"endColumn":25},{"ruleId":"95","severity":1,"message":"106","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":19},{"ruleId":"95","severity":1,"message":"107","line":19,"column":22,"nodeType":"97","messageId":"98","endLine":19,"endColumn":26},{"ruleId":"95","severity":1,"message":"108","line":19,"column":28,"nodeType":"97","messageId":"98","endLine":19,"endColumn":35},{"ruleId":"95","severity":1,"message":"109","line":19,"column":37,"nodeType":"97","messageId":"98","endLine":19,"endColumn":42},"@typescript-eslint/no-unused-vars","'InputBase' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'data1' is assigned a value but never used.","'loading1' is assigned a value but never used.","'error1' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'ReactNode' is defined but never used.","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used."]